name: Semantic Release for Apps

on:
  push:
    branches:
      - master

permissions: write-all

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0

      # Get the folder paths of changed files
      - name: Get changed directories
        id: changed_dirs
        run: |
          CHANGED_DIRS=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ 'BEGIN{OFS=FS} NF--')
          if [[ -z $CHANGED_DIRS ]]; then
            echo "::set-output name=dirs::"
          else
            echo "::set-output name=dirs::$CHANGED_DIRS"
          fi

      # Determine the paths to the CHANGELOG.md files for each directory
      - name: Determine CHANGELOG.md paths
        id: changelog_paths
        run: |
          DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          if [[ -z $DIRS ]]; then
            echo "::set-output name=paths::"
          else
            CHANGELOG_PATHS=""
            IFS=$'\n' read -r -d '' -a DIRS_ARRAY <<< "$DIRS"
            for dir in "${DIRS_ARRAY[@]}"
            do
              if [[ -f "$dir/CHANGELOG.md" ]]; then
                CHANGELOG_PATHS+="$dir/CHANGELOG.md"$'\n'
              fi
            done
            if [[ -z $CHANGELOG_PATHS ]]; then
              echo "::set-output name=paths::"
            else
              echo "::set-output name=paths::$CHANGELOG_PATHS"
            fi
          fi

      # Check if there are any CHANGELOG.md paths found
      - name: Check if CHANGELOG.md paths exist
        id: check_changelog_paths
        run: |
          if [[ -z "${{ steps.changelog_paths.outputs.paths }}" ]]; then
            echo "::set-output name=abort::true"
          else
            echo "::set-output name=abort::false"
          fi

      # Abort the workflow if no CHANGELOG.md paths found
      - name: Abort Workflow if no CHANGELOG.md paths
        if: steps.check_changelog_paths.outputs.abort == 'true'
        run: exit 0

      # Iterate over the directories with changelog.md files
      - name: Iterate over directories with CHANGELOG.md
        id: iterate_dirs
        run: |
          CHANGELOG_PATHS="${{ steps.changelog_paths.outputs.paths }}"
          if [[ -n $CHANGELOG_PATHS ]]; then
            IFS=$'\n' read -r -d '' -a PATHS_ARRAY <<< "$CHANGELOG_PATHS"
            for path in "${PATHS_ARRAY[@]}"
            do
              echo "::set-output name=path::$path"
            done
          fi

      # Run semantic release for each directory with a changelog.md file
      - name: Run semantic release
        id: semantic_release
        run: |
          PATHS_ARRAY=("${{ steps.iterate_dirs.outputs.path }}")
          for path in "${PATHS_ARRAY[@]}"
          do
            FOLDER_NAME=$(basename "$(dirname "$path")")
            echo "Running semantic release for $FOLDER_NAME folder: $path"
            # Run semantic release for each directory with the respective changelog.md file
            docker run -e GITHUB_TOKEN="${{ secrets.PAT_GITHUB2 }}" \
              -v "$(pwd):/github/workspace" \
              ghcr.io/codfish/semantic-release-action:v2 --path="$path"
          done

      - name: Semantic Release Output Summary
        id: semantic_summary
        run: |
          PATHS_ARRAY=("${{ steps.iterate_dirs.outputs.path }}")
          for path in "${PATHS_ARRAY[@]}"
          do
            FOLDER_NAME=$(basename "$(dirname "$path")")
            if [[ -n $path ]]; then
              echo "### Semantic Version ($FOLDER_NAME) = ${{ steps.semantic_release.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "${{ toJson(steps.semantic_release.outputs) }}" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
        continue-on-error: true



        
# name: Semantic Release for Apps

# on:
#   push:
#     branches:
#       - master
#     paths:
#     - 'modules/**'
# permissions: write-all

# jobs:
#   release:
#     name: Semantic Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         id: checkout
#         with:
#           fetch-depth: 0

#       # Get the name of the directory that was changed
#       - name: Get changed directories
#         id: changed_dirs
#         run: |
#           echo "::set-output name=dirs::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ '{print $0}' | sort -u)"

#       # Check if there are any tags available
#       - name: Check for tags
#         id: check_tags
#         run: |
#           if [[ -z $(git tag -l) ]]; then
#             echo "::set-output name=has_tags::false"
#           else
#             echo "::set-output name=has_tags::true"
#           fi

#       # Update the tag format to include the name of the directory
#       - name: Update tag format
#         id: update_tag_format
#         run: |
#           APP_NAME=$(echo "${{ steps.changed_dirs.outputs.dirs }}" | awk '{print tolower($0)}')
#           echo "::set-output name=tag_format::${APP_NAME}-v\${version}"

#         # Add new version to changelog or set initial version if no tags are available
#       - name: Add new version to changelog
#         id: add_version_to_changelog
#         run: |
#             if [[ "${{ steps.check_tags.outputs.has_tags }}" == "true" ]]; then
#             version=$(git describe --tags --abbrev=0)
#             else
#             version="1.0.0"
#             echo "## Changelog" > CHANGELOG.md
#             fi
#             sed -i "s|\[[0-9]\+\.[0-9]\+\.[0-9]\+\]|[${version}] $(date +'%Y-%m-%d')|" CHANGELOG.md
            
#       # https://github.com/marketplace/actions/semantic-release-action#usage
#       - name: Semantic Release
#         uses: docker://ghcr.io/codfish/semantic-release-action:v2
#         id: semantic
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
#         with:
#           tag_format: '${{ steps.update_tag_format.outputs.tag_format }}'
#           additional_packages: |
#             ['@semantic-release/changelog', '@semantic-release/git']
#           plugins: |
#             ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', ['@semantic-release/changelog', {changelogTitle: '# CHANGELOG', "changelogFile": "modules/aws/eks/eks-simple/modules/CHANGELOG.md"}], '@semantic-release/github', ['@semantic-release/git', {
#               "assets": ["modules/aws/eks/eks-simple/modules/CHANGELOG.md"]
#             }]]
#           # specify default branches to add support for the `main` branch
#           # which semantic-release doesn't have as a default yet.
#           branches: |
#             [
#               'master'
#             ]
#       # Get the latest version tag
#       - name: Get latest version tag
#         run: |
#           version=$(git describe --tags --abbrev=0)
#           echo "::set-output name=version::$version"

#       - name: Semantic Release Output Summary
#         id: semantic_summary
#         run: |
#           echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#         continue-on-error: true