name: Semantic Release for Apps

on:
  push:
    branches:
      - master

permissions: write-all

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0

      # Step 1: Get the name of the folder that had the changes
      - name: Get changed directories
        id: changed_dirs
        run: |
          CHANGED_DIRS=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ 'BEGIN{OFS=FS} NF--')
          if [[ -z $CHANGED_DIRS ]]; then
            echo "::set-output name=dirs::"
          else
            echo "::set-output name=dirs::$CHANGED_DIRS"
          fi

      # Step 2: Check if the changed folder should be considered
      - name: Check folder with semver.yml
        id: check_folder
        run: |
          CHANGED_DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          if [[ -z $CHANGED_DIRS ]]; then
            echo "::set-output name=consider_folder::"
          else
            SEMVER_PATTERNS=$(awk 'NF' < .github/semver.yml)
            MATCHED_FOLDER=""
            while IFS= read -r pattern; do
              MATCH_FOUND=false
              for CHANGED_FOLDER in $CHANGED_DIRS; do
                if [[ "$CHANGED_FOLDER" == $pattern* ]]; then
                  MATCHED_FOLDER=$CHANGED_FOLDER
                  MATCH_FOUND=true
                  break
                fi
              done
              if [[ "$MATCH_FOUND" == "true" ]]; then
                break
              fi
            done <<< "$SEMVER_PATTERNS"
            if [[ -n $MATCHED_FOLDER ]]; then
              ROOT_PATH=$(git rev-parse --show-toplevel)
              FOLDER_PATH="$ROOT_PATH/$MATCHED_FOLDER"
              echo "::set-output name=consider_folder::$FOLDER_PATH"
            else
              echo "No matching folder found in semver.yml. Skipping release."
              exit 0
            fi
          fi

      # Step 3: Create git tags
      - name: Update tag format
        id: update_tag_format
        run: |
          APP_DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          if [[ -z $APP_DIRS ]]; then
            echo "::set-output name=tag_format::v\${version}"
          else
            APP_NAME=$(echo "$APP_DIRS" | awk '{print tolower($0)}')
            echo "::set-output name=tag_format::${APP_NAME}-v\${version}"
          fi

      # Step 4: Determine the path to the CHANGELOG.md file
      - name: Determine CHANGELOG.md path
        id: changelog_path
        run: |
          CONSIDER_FOLDER="${{ steps.changed_dirs.outputs.consider_folder }}"
          if [[ -z $CONSIDER_FOLDER ]]; then
            echo "::set-output name=path::./CHANGELOG.md"
          else
            ROOT_PATH=$(git rev-parse --show-toplevel)
            FOLDER_PATH="${CONSIDER_FOLDER/#$ROOT_PATH\//}"
            CHANGED_DIRS="${{ steps.changed_dirs.outputs.folder }}"
            while IFS= read -r dir; do
              if [[ -f "${dir}/CHANGELOG.md" ]]; then
                echo "::set-output name=path::${dir}/CHANGELOG.md"
              fi
            done <<< "$CHANGED_DIRS"
          fi

      # Step 5: Run semantic release
      - name: Semantic Release
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
        with:
          tag_format: '${{ steps.update_tag_format.outputs.tag_format }}'
          additional_packages: |
            ['@semantic-release/changelog', '@semantic-release/git']
          plugins: |
            [
              '@semantic-release/commit-analyzer',
              '@semantic-release/release-notes-generator',
              ['@semantic-release/changelog', { changelogTitle: '# CHANGELOG', "changelogFile": "${{ steps.changelog_path.outputs.path }}" }],
              '@semantic-release/github',
              ['@semantic-release/git', { "assets": ["${{ steps.changelog_path.outputs.path }}"] }]
            ]
          branches: |
            [
              'master'
            ]
        if: steps.changelog_path.outputs.path != ''

      # Step 6: Store latest release in changelog.md files
      - name: Store latest release in changelog.md files
        id: store_latest_release
        run: |
          CONSIDER_FOLDER="${{ steps.changed_dirs.outputs.consider_folder }}"
          if [[ -n $CONSIDER_FOLDER ]]; then
            LATEST_RELEASE="$(echo "${{ steps.semantic_summary.outputs }}" | jq -r '.["release-version"]')"
            SPECIFIC_CHANGELOG_PATH="${{ steps.changelog_path.outputs.path }}"

            # Create CHANGELOG.md file if it doesn't exist
            if [[ ! -f "$SPECIFIC_CHANGELOG_PATH" ]]; then
              touch "$SPECIFIC_CHANGELOG_PATH"
            fi

            echo -e "# Latest Release\n\n## Version ${LATEST_RELEASE}" >> "$SPECIFIC_CHANGELOG_PATH"
          fi

      - name: Semantic Release Output Summary
        id: semantic_summary
        run: |
          echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true


        
# name: Semantic Release for Apps

# on:
#   push:
#     branches:
#       - master
#     paths:
#     - 'modules/**'
# permissions: write-all

# jobs:
#   release:
#     name: Semantic Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         id: checkout
#         with:
#           fetch-depth: 0

#       # Get the name of the directory that was changed
#       - name: Get changed directories
#         id: changed_dirs
#         run: |
#           echo "::set-output name=dirs::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ '{print $0}' | sort -u)"

#       # Check if there are any tags available
#       - name: Check for tags
#         id: check_tags
#         run: |
#           if [[ -z $(git tag -l) ]]; then
#             echo "::set-output name=has_tags::false"
#           else
#             echo "::set-output name=has_tags::true"
#           fi

#       # Update the tag format to include the name of the directory
#       - name: Update tag format
#         id: update_tag_format
#         run: |
#           APP_NAME=$(echo "${{ steps.changed_dirs.outputs.dirs }}" | awk '{print tolower($0)}')
#           echo "::set-output name=tag_format::${APP_NAME}-v\${version}"

#         # Add new version to changelog or set initial version if no tags are available
#       - name: Add new version to changelog
#         id: add_version_to_changelog
#         run: |
#             if [[ "${{ steps.check_tags.outputs.has_tags }}" == "true" ]]; then
#             version=$(git describe --tags --abbrev=0)
#             else
#             version="1.0.0"
#             echo "## Changelog" > CHANGELOG.md
#             fi
#             sed -i "s|\[[0-9]\+\.[0-9]\+\.[0-9]\+\]|[${version}] $(date +'%Y-%m-%d')|" CHANGELOG.md
            
#       # https://github.com/marketplace/actions/semantic-release-action#usage
#       - name: Semantic Release
#         uses: docker://ghcr.io/codfish/semantic-release-action:v2
#         id: semantic
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
#         with:
#           tag_format: '${{ steps.update_tag_format.outputs.tag_format }}'
#           additional_packages: |
#             ['@semantic-release/changelog', '@semantic-release/git']
#           plugins: |
#             ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', ['@semantic-release/changelog', {changelogTitle: '# CHANGELOG', "changelogFile": "modules/aws/eks/eks-simple/modules/CHANGELOG.md"}], '@semantic-release/github', ['@semantic-release/git', {
#               "assets": ["modules/aws/eks/eks-simple/modules/CHANGELOG.md"]
#             }]]
#           # specify default branches to add support for the `main` branch
#           # which semantic-release doesn't have as a default yet.
#           branches: |
#             [
#               'master'
#             ]
#       # Get the latest version tag
#       - name: Get latest version tag
#         run: |
#           version=$(git describe --tags --abbrev=0)
#           echo "::set-output name=version::$version"

#       - name: Semantic Release Output Summary
#         id: semantic_summary
#         run: |
#           echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#         continue-on-error: true