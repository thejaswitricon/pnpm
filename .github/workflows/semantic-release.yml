name: Semantic Release for Apps

on:
  push:
    branches:
      - master
    paths:
    - 'modules/**'
permissions: write-all

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0

      # Get the name of the directory that was changed
      - name: Get changed directories and paths
        id: changed_dirs_paths
        run: |
            CHANGED_DIRS=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ 'NF>1{print $1}' | sort -u)
            CHANGED_PATHS=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ 'NF>1{print $0}' | sort -u)
            echo "::set-output name=dirs::$CHANGED_DIRS"
            echo "::set-output name=paths::$CHANGED_PATHS"

      # Check if there are any tags available
      - name: Check for tags
        id: check_tags
        run: |
          if [[ -z $(git tag -l) ]]; then
            echo "::set-output name=has_tags::false"
          else
            echo "::set-output name=has_tags::true"
          fi

      # Update the tag format to include the name of the directory
      - name: Update tag format
        id: update_tag_format
        run: |
          APP_NAME=$(echo "${{ steps.changed_dirs.outputs.dirs }}" | awk '{print tolower($0)}')
          echo "::set-output name=tag_format::${APP_NAME}-v\${version}"

        # Add new version to changelog or set initial version if no tags are available
      - name: Add new version to changelog
        id: add_version_to_changelog
        run: |
         if test "${{ steps.check_tags.outputs.has_tags }}" = "true"; then
            version=$(git describe --tags --abbrev=0)
         else
            version="1.0.0"
         fi
      
          declare -A CHANGELOG_PATHS=(
            ["modules/aws/eks/eks-simple"]="modules/aws/eks/eks-simple/changelog.md"
            ["modules/aws/ecs/ecs-simple"]="modules/aws/ecs/ecs-simple/changelog.md"
            # Add more directory-to-changelog mappings here as needed
          )
      
          CHANGED_DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          CHANGED_PATHS="${{ steps.changed_dirs_paths.outputs.paths }}"
          IFS=$'\n' read -rd '' -a DIRS_ARRAY <<< "$CHANGED_DIRS"
          IFS=$'\n' read -rd '' -a PATHS_ARRAY <<< "$CHANGED_PATHS"
          for ((i=0; i<${#DIRS_ARRAY[@]}; i++)); do
            DIR="${DIRS_ARRAY[i]}"
            PATH="${PATHS_ARRAY[i]}"
      
            if [[ -v CHANGELOG_PATHS["$DIR"] ]]; then
              CHANGELOG_FILE="${CHANGELOG_PATHS["$DIR"]}"
              sed -i "s|\[[0-9]\+\.[0-9]\+\.[0-9]\+\]|[${version}] $(date +'%Y-%m-%d')|" "$PATH/$CHANGELOG_FILE"
            fi
          done
      
            
      # https://github.com/marketplace/actions/semantic-release-action#usage
      - name: Semantic Release
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
        with:
          tag_format: '${{ steps.update_tag_format.outputs.tag_format }}'
          additional_packages: |
            ['@semantic-release/changelog', '@semantic-release/git']
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', ['@semantic-release/changelog', {changelogTitle: '# CHANGELOG'}], '@semantic-release/github', '@semantic-release/git']
          # specify default branches to add support for the `main` branch
          # which semantic-release doesn't have as a default yet.
          branches: |
            [
              'master'
            ]
        
      # Get the latest version tag
      - name: Get latest version tag
        run: |
          version=$(git describe --tags --abbrev=0)
          echo "::set-output name=version::$version"

      - name: Semantic Release Output Summary
        id: semantic_summary
        run: |
          echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true